apply plugin: "java"

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "com.bigsagebeast.hero.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../core/assets");

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);

    archiveName ("first-hero-${new Date().format('yyyyMMdd')}.jar")

    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

task writeAllAssetsToFile(type: Task) {
    doLast {
        // TODO doesn't work
        // projectfolder/assets
        def assetsFolder = new File("${project.rootDir}/assets/")
        // projectfolder/assets/assets.txt
        def assetsFile = new File(project.ext.assetsDir, "assets.txt")
        // delete that file in case we've already created it
        assetsFile.delete()

        // iterate through all files inside that folder
        // convert it to a relative path
        // and append it to assets.txt the file
        fileTree(assetsFolder).collect {project.ext.assetsDir.relativePath(it) }.each {
            assetsFile.append(it + "\n")
        }
    }
}

task copyTask(type: Copy) {
    file('build/bin').mkdirs()
    from files(project.assetsDir)
    into 'build/bin'
}

dist.dependsOn classes
dist.dependsOn copyTask
copyTask.dependsOn writeAllAssetsToFile